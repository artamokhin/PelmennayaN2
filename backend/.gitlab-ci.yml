include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
    
stages:
  - test
  - build
  - release
  - deploy


sonarqube-backend-sast:
  stage: test
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  only:
    changes:
    - backend/*
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend
    - sonar-scanner
      -Dsonar.projectKey=$SonarQubeProjectMomoBackend
      -Dsonar.sources=.
      -Dsonar.host.url=$SonarQubeUrl
      -Dsonar.login=$SonarQubeLogin


build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --no-cache
      --tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA

    

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    # Проверка запуска контейнера
    - docker run --rm -d --name momo-backend -p 8081:8081 $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    # Ждем пока запустится контейнер
    - sleep 15
    # Скачиваем список пельменей
    - wget -O products.txt localhost:8081/categories
    # Проверяем что пельмени на месте
    - grep -q "id" <(cat products.txt) || exit 1
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то ставим тэг latest
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest

deploy-backend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "/bin/bash -s " < ./backend/backend_deploy.sh
      
