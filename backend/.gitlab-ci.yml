include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
    
stages:
  - test
  - build
  - release
  - deploy


sonarqube-backend-sast:
  stage: test
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  only:
    changes:
    - backend/**/*
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend
    - sonar-scanner
      -Dsonar.projectKey=$SonarQubeProjectMomoBackend
      -Dsonar.sources=.
      -Dsonar.host.url=$SonarQubeUrl
      -Dsonar.login=$SonarQubeLogin


build-backend:
  stage: build
  only:
    changes:
      - backend/**/*
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --no-cache
      --tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA


upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  only:
    changes:
      - backend/*
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    # Проверка запуска контейнера
    - docker run --rm -d --name momo-backend -p 8081:8081 $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    # Ждем пока запустится контейнер
    - sleep 15
    # Скачиваем список пельменей
    - wget -O products.txt localhost:8081/categories
    # Проверяем что пельмени на месте
    - grep -q "id" <(cat products.txt) || exit 1
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то ставим тэг latest
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest

    
deploy-backend:
  stage: deploy
  image: alpine/k8s:1.24.12
  only:
    changes:
      - backend/**/*
      - k8s-chart/**/*
  script:
    - mkdir ~/.kube
    - echo ${kubeconfig} | base64 -d > ~/.kube/config
    - cd k8s-chart
    - helm package ./ --version "1.0.${CI_PIPELINE_ID}"
    - curl -u $NEXUS_REPO_USER:$NEXUS_REPO_PASS $NEXUS_HELM_REPO --upload-file momo-store-1.0.${CI_PIPELINE_ID}.tgz
    - sleep 5
    - helm repo add nexus $NEXUS_HELM_REPO --username $NEXUS_REPO_USER --password $NEXUS_REPO_PASS
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo update
#  Установка Ingress контроллера если не установлен
    - |
      if helm status ingress-nginx > /dev/null 2>&1; then
        echo "Chart already exists, skipping installation"
      else
        helm install ingress-nginx ingress-nginx/ingress-nginx
      fi
# установка основного пакета с параметрами
    - >
      helm upgrade --install --atomic --timeout 5m momo-store nexus/momo-store
      --set-string alertmanager.chat_id="${CHAT_ID}"
      --set-string alertmanager.bot_token="${BOT_TOKEN}"
      --set-string dockerconfigjson="${dockerconfigjson}"
    - rm ~/.kube/config